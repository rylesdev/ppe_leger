New :
    - Vérifier que la mise à jour des exemplaires de livres se fait bien suite à un statutCommande="expédiée"

    - Regarder pourquoi la vue_panier.php détient un "prixPromotion" et voir si c'est en lien avec la "vue_promotion.php".
        Si c'est pas le cas alors modifier la vue_promotion.php pour mettre "reductionPromotion" et voir si il y a des bugs dans le panier par la suite.

    - Enlever "Obtenez votre livre offert maintenant" dans la page d'accueil pour les admin

    - Mettre des gestions d'exceptions dans le insertLivre (page livre) pour l'admin

    - Pour les stats mettre des graphes et des courbes

    - Regarder si la prostock offrirLivre fonctionne bien

    - Vérifier la logique de chaque page et s'assurer qu'il y ai pas d'incohérence avec les méthodes/$_SESSION notamment

    - Voir si je peux remplacer, dans vue_livre, "if (isset($isAdmin) && $isAdmin == 1) {"
        par if (isset($_SESSION['roleUser']) && $_SESSION['roleUser']!="admin") {""

    - Trier tous les fichiers .css et supprimer ceux qui sont inutiles

    - Régler le problème des admin en double (dans le roleUser et dans la table admin)

    - Si les champs lors de l'inscription ne sont pas tous remplis, alors il faut bloquer le "insertUser"

    - Je peux payer un livre de 100 points avec 70 points.

    - La méthode "selectLikeLivres" qui sert à filtrer les livres ne marche pas.

    - (Optionnel) - Quand j'ajoute un livre avec une quantité de 12 (par exemple), la quantité sélectionnée est 3.
        Réponse : Probablement un problème de synchronisation entre les "Confirmer la quantité".

    - Supprimer le “nomUser” de la table Avis et trouver un moyen pour régler la view "selectAvis".




Expression des besoins à faire et garder dans un dossier à part :
    - Mot de passe oublié dans la Page Connexion.
    - Renouvellement du mot de passe tous les 90 jours.
    - Archiver toutes les commandes qui ont été expédiées avec le nom du client.
    - Créer une view sur le nombre de livres vendus par catégorie.
    - Ajouter le champ "nbCommandeUser" sur la table user qui permet, après chaque achat d'un livre, d'incrémenter automatiquement le champ "nbCommandeUser".
    - Envoyer un mail quand l’utilisateur a fait une commande pour le prévenir que sa commande est expédiée
    - Envoyer un mail quand l’utilisateur a fait une commande pour le prévenir que sa commande est arrivée



A FAIRE :
    FRONT-END
        Page Connexion :
            - Rendre la page plus esthétique
            - Réduire la taille des boutons
            - Mettre une image ou une couleur de fond qui sera la même que sur les autres pages du site
            - Mettre les vues Inscription et Connexion dans un carré
            - Changer la navbar pour mettre la page Panier, Commande, Abonnement, Informations, et Déconnexion sur le côté
            Exemple : https://shop.labourseauxlivres.fr/ https://www.lalibrairie.com/


        Page Panier :
            - (c_panier.php) Trouver un moyen pour que, quand le user clique sur Paypal,
                l'utilisateur soit redirigé vers Paypal.
                "header("Location: https://paypal.me/rylesatm?country.x=FR&locale.x=fr_FR");"

            - (c_abonnement.php) Lorsque l'utilisateur clique sur l'abonnement,
                il faut qu'il soit redirigé vers Paypal.
                "header("Location: https://paypal.me/rylesatm?country.x=FR&locale.x=fr_FR");"



    BACK-END
        PHPMyAdmin
            - Faire un système qui va bloquer l'inscription si le email existe déjà dans la table user.
            - Faire un système qui va bloquer le "insertUser" si les champs lors de l'inscription ne sont pas tous remplis.
            - Prévenir à l’utilisateur, lors de l’inscription, que le mot de passe doit être renouvelé tous les 90 jours
            - Tous les 3 mois le mot de passe doit être expiré et l’utilisateur devra le changer sinon il pourra pas se connecter
            - Créer un bouton "mot de passe oublié" pour que le user puisse changer son mot de passe
            - Envoyer un mail quand l’utilisateur a fait une commande pour le prévenir que sa commande est expédiée
            - Envoyer un mail quand l’utilisateur a fait une commande pour le prévenir que sa commande est arrivée

            - Modifier la base de donnée pour que les spécialisations de la table User soient correctement déclarées. C’est-à-dire que les champs de la table Particulier, par exemple, ne soient pas présents tel qu’ils le sont dans la table User.
            - Suite à cela, modifier les triggers des héritages et le modele des héritages (Procédure, insert, select, etc…).
            - Modifier la base de donnée pour qu’elle ai une logique de MCD correcte (notamment au niveau des clés étrangères qui sont au mauvais endroits (Abonnement et User par exemple)).

            - Voir si le "statutCommande='annulée'" a une utilité dans le code.
                Si ce n'est pas le cas alors le supprimer





Fait :
- Régler le problème de la procédure pOffrirLivre qui marche pas
- Changer le input lorsque le user ajoute un livre au panier pour que ça fonctionne dès le premier coup
- Problème de logique avec les exemplaires. Les exemplaires de chaque livre sont mis à jour uniquement après l'achat (en attente -> expédiée)
        Le problème qui pourrait se produire c'est si l'utilisateur achète plus de livre qu'il y a de stock.
        Il faudrait mettre à jour le stock en temps réel, dès qu'il ajoute un livre au panier.
- Modifier la procédure pQuantiteLigneCommande pour qu'il n'affiche pas un message d'erreur mais qu'il mette à jour la quantité de livre de la ligneCommande qui détient un idLivre similaire (lorsque le message d'erreur est affiché)
- Modifier le fonctionnement de LigneCommande.
        Il faut qu'il y ai une nouvelle commande seulement si l'utilisateur a payé.
        Tant qu'il y a pas de nouvelle commande, alors toutes les ligneCommande se font avec le même idCommande.
- (c_livre.php) régler le problème de l'insertCommande qui ne fonctionne pas et qui affiche un message d'erreur.
- Il faut que l'index.php nous fasse apparaitre par défaut sur la page d'accueil
- Il faut remplacer le logo du bouton "Quitter" par un logo "Authentification"
        - Quand on appuie sur ce bouton ça nous emmène vers c_inscription et c_connexion

- Supprimer les triggers héritage puis essayer les nouvelles requetes héritage
        // - Insert
        // - Update
        // - Delete

- Créer des tables avec des héritages et utiliser les triggers :
                  - User (idUser, Email, MDP (Connexion uniquement))
                      - Particulier (Nom, Prenom, Adresse, ...)
                      - Entreprise (Num SIRET, RaisonSociale, ...)
                  - Admin (table à part)

- Faire un système qui prépare la commande uniquement lorsque le user a payé sur Paypal
    Si il n'a pas payé la commande doit avoir le statut 'en attente', la dateCommande null, et la dateLivraison null.

- Modifier la table commande pour qu'elle contienne plusieurs ligneCommande (voir MCD).
    Actuellement commande = ligneCommande, or il faut que commande < ligneCommande
    ligneCommande = livre
    commande = plusieurs livres
    donc commande = 1 ou plusieurs ligneCommande (commande 1,n -> (Composer) -> 1,1 ligneCommande)


        Acheter :
            - Dans l'onglet "Panier", le client pourra :
                    - Afficher (Modele->selectAllCommande):
                        - Le nom des livres (livre.nomLivre)
                        - Quantité des livres (ligneCommande.quantiteLigneCommande)
                        - Tout en bas :
                            - Récapitulatif du nom de tous les livres (livre)
                            - (View) Montant total de tous les livres (livre et ligneCommande)
                            - Adresse de livraison (user)
                            - Date de livraison (commande)
                            - Bouton pour payer (Paypal)

            - Un client peut acheter un livre en appuyant directement sur un logo dans la colonne "opération".
            - Le client pourra choisir le nombre d'exemplaire à acheter.

            - Faire une opération pour qu'un client puisse supprimer un livre de son panier.
                        Rajouter une colonne "opération" comme les admin pour supprimer un livre du panier.


        Gestion de stocks :
            - Créer une page "Stockage" qui permet aux admin d'augmenter le nombre d'exemplaire pour chaque livre.


        BDD :
            - Faire une View qui va calculer la somme totale de la commande
                en faisant le produit de l'article et du nombre d'exemplaires.

            - Faire une view qui va trier le prix maximum, minimum, l'ordre croissant, décroissant
                pour chaque commande dans la page "panier"->récapitulatif de la commande.

            - Trigger qui empêche une commande si la commande de ce livre existe déjà dans le panier

            - Trigger qui empêche une commande si le stock = 0

            - Trigger qui met à jour automatiquement le stock après une commande

            - Trigger qui envoie une notification dans la table "notification" après chaque commande passée

            - Procédure qui hash automatiquement les mdp

