New :
    - Mettre des requiere_once(header) pour chaque page en s'assurant que ça fonctionne bien
    - Régler le problème du header qui ne s'affiche pas dans la page Informations de l'utilisateur
    - Régler le problème des admin en double (dans le roleUser et dans la table admin)
    - Supprimer les triggers héritage puis essayer les nouvelles requetes héritage (insert, update, etc...)
    -  Faire une page lorsqu'on clique sur un livre
        Récupération de l'idLivre avec un GET (ou POST),
        $idLivre = $_GET['idLivre'] puis afficher les informations du livre (whereIdLivre($idLivre))

    - Dans informations User, créer une ligne pour supprimer le compte (deleteParticulier / deleteEntreprise)

    - Mettre la requete "insertLigneCommande" dans la méthode "insertCommande"
        en stockant les valeurs de ligneCommande dans un tableau matriciel
        Exemple : $lignesCommande = array(
                      array(1, 10, 15.50, "Produit A"), // Chaque sous-tableau représente une ligne de commande
                      array(2, 5, 20.00, "Produit B")
                  );

                  // Ajouter une nouvelle ligne de commande
                  $lignesCommande[] = array(3, 7, 12.75, "Produit C");

                  // Accéder aux informations
                  foreach ($lignesCommande as $ligne) {
                      echo "ID: " . $ligne[0] . ", Quantité: " . $ligne[1] . ", Prix: " . $ligne[2] . ", Description: " . $ligne[3] . "\n";
                  }


Priorité :
    - Si les champs lors de l'inscription ne sont pas tous remplis, alors il faut bloquer le "insertUser"
    - Changer le input lorsque le user ajoute un livre au panier pour que ça fonctionne dès le premier coup


Bug :
    - ...


MCD :
    - Modifier le tables héritages "User", "Particulier" et "Entreprise" pour que les champs soient cohérents.
    - Modifier le modele des héritages (Procédure, insert, select, etc…) pour les triggers notamment.
    - Supprimer le “nomUser” de la table Avis et trouver un moyen pour régler la view "selectAvis".




Autre :
    - Rendre les code plus lisible et plus beau.


Expression des besoins à faire et garder dans un dossier à part :
    - Mot de passe oublié dans la Page Connexion.
    - Renouvellement du mot de passe tous les 90 jours.
    - Archiver toutes les commandes qui ont été expédiées avec le nom du client.
    - Créer une view sur le nombre de livres vendus par catégorie.
    - Ajouter le champ "nbCommandeUser" sur la table user qui permet, après chaque achat d'un livre, d'incrémenter automatiquement le champ "nbCommandeUser".
    - Envoyer un mail quand l’utilisateur a fait une commande pour le prévenir que sa commande est expédiée
    - Envoyer un mail quand l’utilisateur a fait une commande pour le prévenir que sa commande est arrivée



A FAIRE :
    FRONT-END
        Page Connexion :
            - Rendre la page plus esthétique
            - Réduire la taille des boutons
            - Mettre une image ou une couleur de fond qui sera la même que sur les autres pages du site
            - Mettre les vues Inscription et Connexion dans un carré
            - Changer la navbar pour mettre la page Panier, Commande, Abonnement, Informations, et Déconnexion sur le côté
            Exemple : https://shop.labourseauxlivres.fr/ https://www.lalibrairie.com/


        Page du site :
            - Mettre la liste des livres sur la page Accueil (page principale) et supprimer le logo de la liste des livres


        Page Panier :
            - (c_panier.php) Trouver un moyen pour que, quand le user clique sur Paypal,
                l'utilisateur soit redirigé vers Paypal.
                "header("Location: https://paypal.me/rylesatm?country.x=FR&locale.x=fr_FR");"

            - (c_abonnement.php) Lorsque l'utilisateur clique sur l'abonnement,
                il faut qu'il soit redirigé vers Paypal.
                "header("Location: https://paypal.me/rylesatm?country.x=FR&locale.x=fr_FR");"



    BACK-END
        PHPMyAdmin
            - Faire un système qui va bloquer l'inscription si le email existe déjà dans la table user.
            - Faire un système qui va bloquer le "insertUser" si les champs lors de l'inscription ne sont pas tous remplis.
            - Prévenir à l’utilisateur, lors de l’inscription, que le mot de passe doit être renouvelé tous les 90 jours
            - Tous les 3 mois le mot de passe doit être expiré et l’utilisateur devra le changer sinon il pourra pas se connecter
            - Créer un bouton "mot de passe oublié" pour que le user puisse changer son mot de passe
            - Envoyer un mail quand l’utilisateur a fait une commande pour le prévenir que sa commande est expédiée
            - Envoyer un mail quand l’utilisateur a fait une commande pour le prévenir que sa commande est arrivée

            - Modifier la base de donnée pour que les spécialisations de la table User soient correctement déclarées. C’est-à-dire que les champs de la table Particulier, par exemple, ne soient pas présents tel qu’ils le sont dans la table User.
            - Suite à cela, modifier les triggers des héritages et le modele des héritages (Procédure, insert, select, etc…).
            - Modifier la base de donnée pour qu’elle ai une logique de MCD correcte (notamment au niveau des clés étrangères qui sont au mauvais endroits (Abonnement et User par exemple)).

            - Voir si le "statutCommande='annulée'" a une utilité dans le code.
                Si ce n'est pas le cas alors le supprimer


        Bug
            - Je peux payer un livre de 100 points avec 70 points.

            - La méthode "selectLikeLivres" qui sert à filtrer les livres ne marche pas.
            Solution : Montrer au prof que le filtrage de la page Livre (le seul qui marche).

            (Optionnel) - Quand j'ajoute un livre avec une quantité de 12 (par exemple), la quantité sélectionnée est 3.
            Réponse : Probablement un problème de synchronisation entre les "Confirmer la quantité".





Fait :
- Créer des tables avec des héritages et utiliser les triggers :
                  - User (idUser, Email, MDP (Connexion uniquement))
                      - Particulier (Nom, Prenom, Adresse, ...)
                      - Entreprise (Num SIRET, RaisonSociale, ...)
                  - Admin (table à part)

- Faire un système qui prépare la commande uniquement lorsque le user a payé sur Paypal
    Si il n'a pas payé la commande doit avoir le statut 'en attente', la dateCommande null, et la dateLivraison null.

- Modifier la table commande pour qu'elle contienne plusieurs ligneCommande (voir MCD).
    Actuellement commande = ligneCommande, or il faut que commande < ligneCommande
    ligneCommande = livre
    commande = plusieurs livres
    donc commande = 1 ou plusieurs ligneCommande (commande 1,n -> (Composer) -> 1,1 ligneCommande)


        Acheter :
            - Dans l'onglet "Panier", le client pourra :
                    - Afficher (Modele->selectAllCommande):
                        - Le nom des livres (livre.nomLivre)
                        - Quantité des livres (ligneCommande.quantiteLigneCommande)
                        - Tout en bas :
                            - Récapitulatif du nom de tous les livres (livre)
                            - (View) Montant total de tous les livres (livre et ligneCommande)
                            - Adresse de livraison (user)
                            - Date de livraison (commande)
                            - Bouton pour payer (Paypal)

            - Un client peut acheter un livre en appuyant directement sur un logo dans la colonne "opération".
            - Le client pourra choisir le nombre d'exemplaire à acheter.

            - Faire une opération pour qu'un client puisse supprimer un livre de son panier.
                        Rajouter une colonne "opération" comme les admin pour supprimer un livre du panier.


        Gestion de stocks :
            - Créer une page "Stockage" qui permet aux admin d'augmenter le nombre d'exemplaire pour chaque livre.


        BDD :
            - Faire une View qui va calculer la somme totale de la commande
                en faisant le produit de l'article et du nombre d'exemplaires.

            - Faire une view qui va trier le prix maximum, minimum, l'ordre croissant, décroissant
                pour chaque commande dans la page "panier"->récapitulatif de la commande.

            - Trigger qui empêche une commande si la commande de ce livre existe déjà dans le panier

            - Trigger qui empêche une commande si le stock = 0

            - Trigger qui met à jour automatiquement le stock après une commande

            - Trigger qui envoie une notification dans la table "notification" après chaque commande passée

            - Procédure qui hash automatiquement les mdp

