A FAIRE :




Fait :
- Utiliser des fonctions (public function ?) dans le c_panier.php
- Faire un système qui va bloquer l'inscription si le email existe déjà dans la table user.
- Vérifier que l'insertion dans les tables archiveCommande et archiveLigneCommande fonctionne bien après la suppression d'un user.
- Remplacer tous les "if (isset($_SESSION['roleUser']) && $_SESSION['roleUser']!='admin')"" {"
        par  "if (isset($isAdmin) && $isAdmin == 1) {"
- Mettre des gestions d'exceptions :
        - insertLivre (page livre) pour l'admin
        - insertUser (page inscription) pour l'utilisateur
- Régler la page authentification pour envoyer le user vers la page 1 après la connexion, et mettre un message de confirmation après une inscription.
- La méthode "selectLikeLivres" qui sert à filtrer les livres ne marche pas.
- Pour les stats mettre des graphes et des courbes
- Je ne reçois pas mes points lorsque je fais un achat avec Paypal
- Mettre un message "vous avez gagné des points" lorsqu'il y a un ajouterPointABonnement
- Regarder pourquoi la vue_panier.php détient un "prixPromotion" et voir si c'est en lien avec la "vue_promotion.php".
    Si c'est pas le cas alors modifier la vue_promotion.php pour mettre "reductionPromotion" et voir si il y a des bugs dans le panier par la suite.
- L'affichage des prix des livres en promotion dans la page Commande est incorrect
- Vérifier que la Procédure Stockée "pInsertLivre" sert bien à quelque chose.
- Regarder si la prostock offrirLivre fonctionne bien
- Vérifier que la mise à jour des exemplaires de livres se fait bien suite à un statutCommande="expédiée"
- Régler le problème de la procédure pOffrirLivre qui marche pas
- Changer le input lorsque le user ajoute un livre au panier pour que ça fonctionne dès le premier coup
- Problème de logique avec les exemplaires. Les exemplaires de chaque livre sont mis à jour uniquement après l'achat (en attente -> expédiée)
        Le problème qui pourrait se produire c'est si l'utilisateur achète plus de livre qu'il y a de stock.
        Il faudrait mettre à jour le stock en temps réel, dès qu'il ajoute un livre au panier.
- Modifier la procédure pQuantiteLigneCommande pour qu'il n'affiche pas un message d'erreur mais qu'il mette à jour la quantité de livre de la ligneCommande qui détient un idLivre similaire (lorsque le message d'erreur est affiché)
- Modifier le fonctionnement de LigneCommande.
        Il faut qu'il y ai une nouvelle commande seulement si l'utilisateur a payé.
        Tant qu'il y a pas de nouvelle commande, alors toutes les ligneCommande se font avec le même idCommande.
- (c_livre.php) régler le problème de l'insertCommande qui ne fonctionne pas et qui affiche un message d'erreur.
- Il faut que l'index.php nous fasse apparaitre par défaut sur la page d'accueil
- Il faut remplacer le logo du bouton "Quitter" par un logo "Authentification"
        - Quand on appuie sur ce bouton ça nous emmène vers c_inscription et c_connexion

- Supprimer les triggers héritage puis essayer les nouvelles requetes héritage
        // - Insert
        // - Update
        // - Delete

- Créer des tables avec des héritages et utiliser les triggers :
                  - User (idUser, Email, MDP (Connexion uniquement))
                      - Particulier (Nom, Prenom, Adresse, ...)
                      - Entreprise (Num SIRET, RaisonSociale, ...)
                  - Admin (table à part)

- Faire un système qui prépare la commande uniquement lorsque le user a payé sur Paypal
    Si il n'a pas payé la commande doit avoir le statut 'en attente', la dateCommande null, et la dateLivraison null.

- Modifier la table commande pour qu'elle contienne plusieurs ligneCommande (voir MCD).
    Actuellement commande = ligneCommande, or il faut que commande < ligneCommande
    ligneCommande = livre
    commande = plusieurs livres
    donc commande = 1 ou plusieurs ligneCommande (commande 1,n -> (Composer) -> 1,1 ligneCommande)


        Acheter :
            - Dans l'onglet "Panier", le client pourra :
                    - Afficher (Modele->selectAllCommande):
                        - Le nom des livres (livre.nomLivre)
                        - Quantité des livres (ligneCommande.quantiteLigneCommande)
                        - Tout en bas :
                            - Récapitulatif du nom de tous les livres (livre)
                            - (View) Montant total de tous les livres (livre et ligneCommande)
                            - Adresse de livraison (user)
                            - Date de livraison (commande)
                            - Bouton pour payer (Paypal)

            - Un client peut acheter un livre en appuyant directement sur un logo dans la colonne "opération".
            - Le client pourra choisir le nombre d'exemplaire à acheter.

            - Faire une opération pour qu'un client puisse supprimer un livre de son panier.
                        Rajouter une colonne "opération" comme les admin pour supprimer un livre du panier.


        Gestion de stocks :
            - Créer une page "Stockage" qui permet aux admin d'augmenter le nombre d'exemplaire pour chaque livre.


        BDD :
            - Faire une View qui va calculer la somme totale de la commande
                en faisant le produit de l'article et du nombre d'exemplaires.

            - Faire une view qui va trier le prix maximum, minimum, l'ordre croissant, décroissant
                pour chaque commande dans la page "panier"->récapitulatif de la commande.

            - Trigger qui empêche une commande si la commande de ce livre existe déjà dans le panier

            - Trigger qui empêche une commande si le stock = 0

            - Trigger qui met à jour automatiquement le stock après une commande

            - Trigger qui envoie une notification dans la table "notification" après chaque commande passée

            - Procédure qui hash automatiquement les mdp